/*
 * File:   Main.c
 * Author: Daniel González 
 *
 * Created on 13 de abril de 2021, 07:35 PM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = ON          // Code Protection bit (Program memory code protection is enabled)
#pragma config CPD = ON         // Data Code Protection bit (Data memory code protection is enabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//******************************************************************************
//Importación de librerias
//******************************************************************************

#include <xc.h>
#include <stdint.h>

//******************************************************************************
//Directivas del compilador
//******************************************************************************

#define _tmr0_value 230
unsigned int mux = 0;
//******************************************************************************
//Declarar una variable
//******************************************************************************

uint8_t var1 = 0;
uint8_t cont = 0;
uint8_t uni = 0;
uint8_t dec =  0;
uint8_t cent=  0;
uint8_t banderas = 0;
uint8_t display =  0;

//******************************************************************************
//Prototipos de funciones
//******************************************************************************

void conf (void);

//******************************************************************************
//Interrupciones
//******************************************************************************
void __interrupt() isr (void)
{
    if (RBIF ==1)
    {
        if(RB0 == 1) 
        {
            PORTB ++;
            cont ++;
            RBIF = 0;
        }
        if (RB1 == 1)
        { 
            PORTB --;
            cont --;
            RBIF = 0;
        }
    } 
    if (T0IF == 1)
    {
        mux ++;
        cent = cont/100;
        dec = (cont - 100 * cent)/10;
        uni = (cont - 100 * cent - 10 * dec)/1;
        T0IF = 0;
    }
}

//******************************************************************************
//Main
//******************************************************************************
void main(void){
    conf();
    while(1){
    cont = PORTB;      
    }
}

int tabla (int var1)
{
 int w;
 switch (var1)
 {
     case 0 :
         w = 0b00111111;
         break; 
     case 1 :
         w = 0b00000110;
         break;
     case 2 :
         w = 0b01011011;
         break;
     case 3 :
         w = 0b01001111;
         break;
     case 4 :
         w = 0b01100110;
         break;
     case 5 :
         w = 0b01101101;
         break;
     case 6 :
         w = 0b01111101;
         break;
     case 7 :
         w = 0b00000111;
         break;
     case 8 :
         w = 0b01111111;
         break;
     case 9 :
         w = 0b01101111;
         break;
     default:; 
 }
 return w;
}
//******************************************************************************
//Funciones
//******************************************************************************
void conf (void)
{ 

ANSEL = 0x00;
ANSELH = 0X00;

TRISC = 0X00;
TRISB = 0b0000011;
TRISD = 0x00;
TRISE = 0x00;

TRISBbits.TRISB0 = 1;
TRISBbits.TRISB1 = 1;

OSCCONbits.IRCF2 = 1;
OSCCONbits.IRCF2 = 0;
OSCCONbits.IRCF2 = 0;
OSCCONbits.SCS = 1;

OPTION_REGbits.T0CS = 0;
OPTION_REGbits.PSA  = 0;
OPTION_REGbits.PS2  = 1;
OPTION_REGbits.PS1  = 1;
OPTION_REGbits.PS0  = 1;
 
INTCONbits.GIE  = 1 ;
INTCONbits.RBIF = 1 ;
INTCONbits.RBIE = 1 ;
INTCONbits.T0IE = 1 ;

OPTION_REGbits.nRBPU = 0;
WPUB = 0b00000011;
IOCBbits.IOCB0 = 1;
IOCBbits.IOCB1 = 1;

INTCONbits.GIE=1; 
INTCONbits.PEIE=1;
INTCONbits.TMR0IE=1;
INTCONbits.TMR0IF=0;
INTCONbits.RBIF = 0;


}
        
